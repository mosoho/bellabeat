geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
View(device_usage_days)
View(device_usage_days)
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1562500, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
geom_hline(yintercept = 0, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1562500, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
geom_rect(data=rect_left, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=rect_right, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
rect_left <- data.frame(xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=.1333333)
rect_right <- data.frame(xmin=-Inf, xmax=Inf, ymin=0.1468750, ymax=Inf)
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
geom_rect(data=rect_left, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=rect_right, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
rect_left <- data.frame(xmin=-Inf, xmax=Inf, ymin=0, ymax=.1333333)
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
geom_rect(data=rect_left, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=rect_right, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
geom_rect(data=rect_left, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=rect_right, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill="#05C4BC",
color="white",
alpha=0.2,
inherit.aes = FALSE) +
geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
rm(rect_left)
rm(rect_right)
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
# geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
# geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=1), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
# geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
# geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=1), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
# geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
# geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=.1), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
## GGplot: Horizontal lines
device_usage_days_graph %>%
mutate(DaySorted = fct_relevel(Day, "Sonntag", "Samstag", "Freitag",
"Donnerstag", "Mittwoch", "Dienstag",
"Montag")) %>%
ggplot(aes(x = DaySorted, y = Percent, label = PercentCharacter)) +
# geom_hline(yintercept = .1333333, linetype = "dashed", size = 1, color = "grey") +
# geom_hline(yintercept = 0.1468750, linetype = "dashed", size = 1, color = "grey") +
geom_segment(aes(xend=DaySorted, yend=0), size = .8) +
geom_text(nudge_x = .25) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
# By Hour: Device Usage ---------------------------------------------------
# Anzahl Tage per Stunde in der Woche. Pro user ID
device_usage_hours <- minute_merged %>%
group_by(Id, Date, Hour) %>%
summarise(Count = sum(n())) %>%
group_by(Id, Date, Hour) %>%
summarise(Count = sum(n())) %>%
group_by(Id, Hour) %>%
summarise(Count = sum(n()))
# Distribution with relative numbers
device_usage_hours_graph <- device_usage_hours %>%
group_by(Hour) %>%
summarise(Count = sum(Count)) %>%
mutate(Overall = sum(Count)) %>%
group_by(Hour) %>%
summarise(Percent = Count / Overall) %>%
mutate(PercentCharacter = scales::percent(Percent))
## GGplot: Horizontal lines
device_usage_hours_graph %>%
mutate(HourLabel = fct_relevel(Hour,
"23", "22", "21", "20", "19", "18", "17", "16",
"15", "14", "13", "12", "11", "10", "09", "08",
"07", "06", "05", "04", "03", "02", "01", "00")) %>%
ggplot(aes(x = HourLabel, y = Percent)) +
geom_segment(aes(xend=HourLabel, yend=0), size = .8) +
geom_point(size = 4, color = "orange") +
theme_minimal() +
xlab("") +
ylab("") +
scale_y_continuous(labels = scales::percent) +
coord_flip()
View(device_usage_hours_graph)
rm(daily_users_sleep)
rm(device_usage_days)
rm(device_usage_days_graph)
daily_merged %>% group_by(Id) %>% summarise(Count = n())
minute_merged %>% group_by(Id) %>% summarise(Count = n())
hourly_merged %>% group_by(Id) %>% summarise(Count = n())
sleep_day <- read_csv("data/sleepDay_merged.csv")
View(sleep_day)
rm(sleep_day)
#Check mean of TotalIntensity by Day
intensity_by_day <- hourly_merged %>%
group_by(Day) %>%
summarise(Mean = mean(TotalIntensity), SD = sd(TotalIntensity), Median = median(TotalIntensity))
View(hourly_merged)
View(intensity_by_day)
View(minute_merged)
View(daily_merged)
View(minute_merged)
View(heartrate_seconds)
View(hourly_merged)
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Date) %>%
summarise(IntensitySum = sum(TotalIntensity))
View(hourly_total_intensity)
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Id, Date) %>%
summarise(IntensitySum = sum(TotalIntensity))
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Id, Date) %>%
summarise(IntensitySum = sum(TotalIntensity)) %>%
mutate(IntensityMedian = median(IntensitySum))
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Id, Date) %>%
summarise(IntensitySum = sum(TotalIntensity)) %>%
group_by(Id) %>%
mutate(IntensityMedian = median(IntensitySum))
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Id, Date) %>%
summarise(IntensitySum = sum(TotalIntensity)) %>%
group_by(Id) %>%
mutate(IntensityMedian = median(IntensitySum))
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Id, Date) %>%
summarise(IntensitySum = sum(TotalIntensity)) %>%
group_by(Id) %>%
mutate(IntensityMedian = median(IntensitySum))
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Date) %>%
summarise(IntensitySum = sum(TotalIntensity)) %>%
mutate(IntensityMedian = median(IntensitySum))
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Id, Date) %>%
summarise(IntensitySum = sum(TotalIntensity)) %>%
group_by(Id) %>%
mutate(IntensityMedian = median(IntensitySum))
## Check median of TotalIntensity, aggregated on day level
hourly_total_intensity <- hourly_merged %>%
group_by(Id, Date) %>%
summarise(IntensitySum = sum(TotalIntensity))
#-> Median
median(hourly_total_intensity$IntensitySum)
# Clean Up
rm(hourly_total_intensity)
rm(rect)
rm(intensity_by_day)
rm(device_usage_hours)
rm(device_usage_hours_graph)
View(heartrate_seconds)
View(weight_log_info)
View(minute_merged)
# Loading all existing files after each other as a start up process
# Prepare + Process -------------------------------------------------------
source("code/2_prepare/1_CSV load.R")
# source("code/2_prepare/2_Identify data structures.R") ## Skipping as it's not creating or changing tables
source("code/3_process/1_Fix DATE issues.R")
source("code/3_process/2_Corelation.R")
source("code/3_process/3_Wide vs Long.R")
daily_activity <- read_csv("data/dailyActivity_merged.csv")
# Loading CSVs that failed to upload in SQL & fix them
# Load package(s)
library(tidyverse) # General cleaning package
library(skimr) # To load some data
library(lubridate) # As some dates have to be cleaned up
library(scales) # As graph scaling needs to be modified
library(ggpmisc)
# Load inclusive color palette
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7")
# Load all CSVs
daily_activity <- read_csv("data/dailyActivity_merged.csv")
daily_calories <- read_csv("data/dailyCalories_merged.csv")
daily_intensities <- read_csv("data/dailyIntensities_merged.csv")
daily_steps <- read_csv("data/dailySteps_merged.csv")
heartrate_seconds <- read_csv("data/heartrate_seconds_merged.csv")
hourly_calories <- read_csv("data/hourlyCalories_merged.csv")
hourly_intensities <- read_csv("data/hourlyIntensities_merged.csv")
hourly_steps <- read_csv("data/hourlySteps_merged.csv")
minute_calories_narrow <- read_csv("data/minuteCaloriesNarrow_merged.csv")
minute_calories_wide <- read_csv("data/minuteCaloriesWide_merged.csv")
minute_intensities_narrow <- read_csv("data/minuteIntensitiesNarrow_merged.csv")
minute_intensities_wide <- read_csv("data/minuteIntensitiesWide_merged.csv")
minute_mets_narrow <- read_csv("data/minuteMETsNarrow_merged.csv")
minute_sleep <- read_csv("data/minuteSleep_merged.csv")
minute_steps_narrow <- read_csv("data/minuteStepsNarrow_merged.csv")
minute_steps_wide <- read_csv("data/minuteStepsWide_merged.csv")
sleep_day <- read_csv("data/sleepDay_merged.csv")
weight_log_info <- read_csv("data/weightLogInfo_merged.csv")
View(daily_activity)
View(daily_calories)
View(weight_log_info)
View(daily_calories)
View(daily_activity)
View(daily_intensities)
heartrate_seconds %>% group_by(Id) %>% summarise(n())
test <- heartrate_seconds %>% group_by(Id) %>% summarise(n())
View(test)
rm(test)
View(daily_steps)
daily_steps %>% group_by(Id) %>% summarise(n())
View(heartrate_seconds)
View(hourly_calories)
View(hourly_intensities)
View(hourly_steps)
View(minute_calories_narrow)
View(minute_calories_wide)
View(minute_intensities_narrow)
View(minute_intensities_wide)
View(minute_mets_narrow)
minute_mets_narrow %>% group_by(Id) %>% summarise(n())
View(minute_sleep)
minute_sleep %>% group_by(Id) %>% summarise(n())
View(minute_intensities_narrow)
View(minute_steps_narrow)
View(sleep_day)
View(sleep_day)
View(minute_sleep)
sleep_day %>% group_by(Id) %>% summarise(n())
View(weight_log_info)
weight_log_info %>% group_by(Id) %>% summarise(n())
# Loading all existing files after each other as a start up process
# Prepare + Process -------------------------------------------------------
source("code/2_prepare/1_CSV load.R")
# source("code/2_prepare/2_Identify data structures.R") ## Skipping as it's not creating or changing tables
source("code/3_process/1_Fix DATE issues.R")
source("code/3_process/2_Corelation.R")
source("code/3_process/3_Wide vs Long.R")
source("code/3_process/4_Reformat_minute_sleep.R")
# Analyze -----------------------------------------------------------------
source("code/4_analyze/2_plots_daily_sleep_day.R")
source("code/4_analyze/1_prep_merge_and_order.R")
source("code/4_analyze/1_prep_remove_duplicates.R")
# Plots - should not be needed for loading
# source("code/4_analyze/2_plots_daily_merged.R")
# source("code/4_analyze/2_plots_hourly_merged.R")
# source("code/4_analyze/2_plots_minute_merged.R")
# source("code/4_analyze/2_plots_weight_log_info.R")
View(heartrate_seconds)
View(daily_merged)
View(heartrate_seconds)
View(weight_log_info)
View(minute_merged)
View(hourly_merged)
View(minute_merged)
View(hourly_merged)
View(daily_merged)
View(daily_merged)
source("code/2_prepare/1_CSV load.R")
View(minute_intensities_wide)
View(minute_intensities_narrow)
View(daily_activity)
View(daily_intensities)
View(hourly_intensities)
View(minute_intensities_narrow)
